prop.table(table(yA))
plot(ppmc, type = "h", xlab = " # of tumors", ylim = c(0, 0.6), ylab = "", lwd = 5)
points(0:10 +0.1, epmf, type = "h", col = "gray", lwd = 5)
plot(ppmc, type = "h", xlab = " # of tumors", ylim = c(0, 0.6), ylab = "", lwd = 5)
points(0:6 +0.1, epmf, type = "h", col = "gray", lwd = 5)
plot(ppmc, type = "h", xlab = " # of tumors", ylim = c(0, 0.6), ylab = "", lwd = 5)
points(0:6 +0.1, epmf, type = "h", col = "gray", lwd = 5)
points(6:15 +0.1, epmf, type = "h", col = "gray", lwd = 5)
plot(ppmc, type = "h", xlab = " # of tumors", ylim = c(0, 0.6), ylab = "", lwd = 5)
points(epmf, type = "h", col = "gray", lwd = 5)
points(epmf, type = "h", col = "gray", lwd = 5)
t <- mean(yA)/ sd(yA)
ypp <- sapply(Theta1, function(x) rpois(aA, x))
tpp <- apply(ypp, 2, function(x) mean(x)/sd(x))
mean(tpp >= t)
hist(tpp, probability = TRUE, ylab = "", xlab = expression(T(tilde(Y))), main = "")
points(t, 0.3, type = "h", lwd = 5)
plot(ppmc, type = "h", xlab = " # of tumors", ylim = c(0, 0.6), ylab = "", lwd = 5)
points(epmf, 0.1, type = "h", col = "gray", lwd = 5)
hist(tpp, probability = TRUE, ylab = "", xlab = expression(T(tilde(Y))), main = "")
points(t, 0.3, type = "h", lwd = 5)
t <- mean(yA)/ sd(yA)
t
library(fpp3)
algeria_economy %>% global_economy %>%
filter(Country == "Algeria")
library(tidyverse)
algeria_economy %>% global_economy %>%
filter(Country == "Algeria")
algeria_economy %>% tsibbledata::global_economy %>%
filter(Country == "Algeria")
algeria_economy %>% tsibbledata::global_economy %>%
filter(Country == "Algeria")
algeria_economy <- tsibbledata::global_economy %>%
filter(Country == "Algeria")
algeria_economy %>%
model(ANN = ETS(Exports ~error("A")) + trend("N") + season("N")) %>%
tidy()
algeria_economy %>%
model(ANN = ETS(Exports ~ error("A")) + trend("N") + season("N")) %>%
tidy()
algeria_economy %>%
model(ANN = ETS(Exports ~ error("A")) + trend("N") + season("N")) %>%
tidy()
algeria_economy %>%
model(ANN = ETS(Exports ~ error("A") + trend("N") + season("N")) %>%
tidy()
algeria_economy %>%
model(ANN = ETS(Exports ~ error("A") + trend("N") + season("N"))) %>%
tidy()
algeria_economy %>%
model(ANN = ETS(Exports ~ error("A") + trend("N") + season("N") )) %>%
tidy()
global_economy %>% filter(!is.na(Exports)) %>% model(ANN = ETS(Exports ~ error("A") + trend("N") + season("N") )) -> fit
fit
library(fpp3)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
us_retail_employment %>%
model(
classical_decomposition(Employed, type = "additive")
) %>%
components() %>%
autoplot() +
labs(title = "Classical additive decomposition of total
US retail employment")
aus_exports <- global_economy %>%
filter(Country == "Australia") %>%
mutate(
`5-MA` = slider::slide_dbl(Exports, mean,
.before = 2, .after = 2, .complete = TRUE)
aus_exports <- global_economy %>%
filter(Country == "Australia") %>%
mutate(
`5-MA` = slider::slide_dbl(Exports, mean,
.before = 2, .after = 2, .complete = TRUE)
)
aus_exports %>%
autoplot(Exports) +
geom_line(aes(y = `5-MA`), colour = "#D55E00") +
labs(y = "% of GDP",
title = "Total Australian exports") +
guides(colour = guide_legend(title = "series"))
aus_exports
aus_exports %>%
mutate(Seasonal = Exports - '5-MA')
aus_exports %>%
mutate(Seasonal = Exports - 5-MA)
aus_exports %>%
mutate(Seasonal = "Exports" - "5-MA")
aus_exports %>% tail()
aus_exports %>%
%>% filter(Year !=1960)%>% filter(Year !=1961)%>% filter(Year !=2016)%>% filter(Year !=2017))
aus_exports %>%
filter(Year !=1960)%>% filter(Year !=1961)%>% filter(Year !=2016)%>% filter(Year !=2017)) %>%
aus_exports %>%
filter(Year !=1960) %>% filter(Year !=1961 %>% filter(Year !=2016) %>% filter(Year !=2017)) %>%
mutate(Seasonal = "Exports" - "5-MA")
us_retail_employment %>%
model(
STL(Employed ~ trend(window = 7) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
us_retail_employment %>%
model(
STL(Employed ~ trend(window = 7) +
season(window = 5),
robust = TRUE)) %>%
components() %>%
autoplot()
us_retail_employment %>%
model(
STL(Employed ~ trend(window = 7) +
season(window = 1),
robust = TRUE)) %>%
components() %>%
autoplot()
us_retail_employment %>%
model(
STL(Employed ~ trend(window = 7) +
season(window = 111111),
robust = TRUE)) %>%
components() %>%
autoplot()
us_retail_employment %>%
model(
STL(Employed ~ trend(window = 4) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
us_retail_employment %>%
model(
STL(Employed ~ trend(window = 5) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
knitr::opts_chunk$set(echo = TRUE)
us_retail_employment %>%
model(
classical_decomposition(Employed, type = "additive")
) %>%
components() %>%
autoplot() +
labs(title = "Classical additive decomposition of total
US retail employment")
aus_exports <- global_economy %>%
filter(Country == "Australia") %>%
mutate(
`5-MA` = slider::slide_dbl(Exports, mean,
.before = 2, .after = 2, .complete = TRUE)
)
aus_exports %>%
autoplot(Exports) +
geom_line(aes(y = `5-MA`), colour = "#D55E00") +
labs(y = "% of GDP",
title = "Total Australian exports") +
guides(colour = guide_legend(title = "series"))
x11_dcmp <- us_retail_employment %>%
model(x11 = X_13ARIMA_SEATS(Employed ~ x11())) %>%
components()
us_retail_employment %>%
model(
STL(Employed ~ trend(window = 1) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
us_retail_employment %>%
model(
STL(Employed ~ trend(window = 9) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
us_retail_employment %>%
model(
STL(Employed ~ trend(window = 15) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
us_retail_employment %>%
model(
STL(Employed ~ trend(window = 31) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
us_retail_employment %>%
model(
STL(Employed ~ trend(window = 195) +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
tourism %>%
features(Trips, feat_stl) %>%
ggplot(aes(x = trend_strength, y = seasonal_strength_year,
col = Purpose)) +
geom_point() +
facet_wrap(vars(State))
library(fpp3)
library(tidyverse)
tourism %>%
features(Trips, feat_stl) %>%
ggplot(aes(x = trend_strength, y = seasonal_strength_year,
col = Purpose)) +
geom_point() +
facet_wrap(vars(State))
tourism %>% features(Trips, feat_acf)
library(fpp3)
library(tidyverse)
aus_accommodation
aus_accommodation %>% distinct(State)
schooldata1 <-c(2.11,9.75,13.88,11.3,8.93,15.66,16.38,4.54,8.86,11.94,12.47,11.11,11.65, 14.53, 9.61, 7.38, 3.34,9.06,
9.45, 5.98,7.44, 8.5, 1.55, 11.45, 9.73)
school2data <-c(0.29, 1.13, 6.52,11.72,6.54,5.63,14.59,11.74,9.12,9.43
10.64, 12.28,9.5,0.63,15.35,5.31,8.49,3.04,3.77,6.22,2.14,6.58,1.11)
school2data <-c(0.29, 1.13, 6.52,11.72,6.54,5.63,14.59,11.74,9.12,9.43,
10.64, 12.28,9.5,0.63,15.35,5.31,8.49,3.04,3.77,6.22,2.14,6.58,1.11)
school3data <-c(4.33, 7.77,4.15, 5.64,7.69,5.04,10.01,13.43,13.63,9.9,
5.72,5.16,4.33,12.9,11.27,6.05,0.95,6.02,12.22,12.85)
school1data <-c(2.11,9.75,13.88,11.3,8.93,15.66,16.38,4.54,8.86,11.94,12.47,11.11,11.65, 14.53, 9.61, 7.38, 3.34,9.06,
9.45, 5.98,7.44, 8.5, 1.55, 11.45, 9.73)
school1data <-c(2.11,9.75,13.88,11.3,8.93,15.66,16.38,4.54,8.86,11.94,12.47,11.11,11.65, 14.53, 9.61, 7.38, 3.34,9.06,
9.45, 5.98,7.44, 8.5, 1.55, 11.45, 9.73)
school2data <-c(0.29, 1.13, 6.52,11.72,6.54,5.63,14.59,11.74,9.12,9.43,
10.64, 12.28,9.5,0.63,15.35,5.31,8.49,3.04,3.77,6.22,2.14,6.58,1.11)
school3data <-c(4.33, 7.77,4.15, 5.64,7.69,5.04,10.01,13.43,13.63,9.9,
5.72,5.16,4.33,12.9,11.27,6.05,0.95,6.02,12.22,12.85)
mu0 <- 5
sigma02 <- 4
k0 <- 1
v0 <- 2
bary1 <- mean(school1data)
n1 <- 25
n2 <- 23
n3 <- 20
bary1 <- mean(school1data)
bary2 <- mean(school2data)
bary3 <- mean(school3data)
#prior
mu0 <- 5
sigma02 <- 4
k0 <- 1
v0 <- 2
# data
n1 <- 25
n2 <- 23
n3 <- 20
bary1 <- mean(school1data)
bary2 <- mean(school2data)
bary3 <- mean(school3data)
s12 <- sd(school1data)
s22 <- sd(school2data)
s32 <- sd(school3data)
s12 <- var(school1data)
s22 <- var(school2data)
s32 <- var(school3data)
kn <- k0 + n1
mun <- ((k0* mu0)+ (n1* bary1))/kn
kn1 <- k0 + n1
mun <- ((k0* mu0)+ (n1* bary1))/kn1
sigman12 <- (1/nun) * (nu0 * sigma02 + (n - 1) * s12 + k0 * n * (bary - mu0)^2/kn)
nun <- nu0 + n
nu0 <- 2
nun <- nu0 + n
nun <- nu0 + n1
sigman12 <- (1/nun) * (nu0 * sigma02 + (n - 1) * s12 + k0 * n * (bary - mu0)^2/kn)
sigman12 <- (1/nun) * (nu0 * sigma02 + (n1 - 1) * s12 + k0 * n1 * (bary - mu0)^2/kn)
sigman12 <- (1/nun) * (nu0 * sigma02 + (n1 - 1) * s12 + k0 * n1 * (bary1 - mu0)^2/kn)
nun1 <- nu0 + n1
gridsize <- 200
theta <- seq(from = 1.6, to = 2, length = gridsize)
prec <- seq(from = 20, to = 150, length = gridsize)
postprec <- sapply(prec, function(x) dgamma(x, nun1/2, nun1 * sigman12/2))
postprec
sigman12 <- (1/nun1) * (nu0 * sigma02 + (n1 - 1) * s12 + k0 * n1 * (bary1 - mu0)^2/kn)
kn1 <- k0 + n1
nun1 <- nu0 + n1
mun <- ((k0* mu0)+ (n1* bary1))/kn1
sigman12 <- (1/nun1) * (nu0 * sigma02 + (n1 - 1) * s12 + k0 * n1 * (bary1 - mu0)^2/kn)
gridsize <- 200
theta <- seq(from = 1.6, to = 2, length = gridsize)
prec <- seq(from = 20, to = 150, length = gridsize)
postprec <- sapply(prec, function(x) dgamma(x, nun1/2, nun1 * sigman12/2))
postprec
post <- matrix(0, gridsize, gridsize)
for (i in 1:gridsize) {
post[, i] <- sapply(prec, function(x) dnorm(theta[i], mun, 1/sqrt(10 * x)))
post[, i] <- post[, i] * postprec
}
grays <- gray((10:0)/10)
image(theta, prec, t(post), col = grays, xlab = expression(theta), ylab = expression(widetilde(sigma)^2))
gridsize <- 200
theta <- seq(from = 0, to = 20, length = gridsize)
prec <- seq(from = 0, to = 10, length = gridsize)
postprec <- sapply(prec, function(x) dgamma(x, nun1/2, nun1 * sigman12/2))
post <- matrix(0, gridsize, gridsize)
for (i in 1:gridsize) {
post[, i] <- sapply(prec, function(x) dnorm(theta[i], mun, 1/sqrt(10 * x)))
post[, i] <- post[, i] * postprec
}
grays <- gray((10:0)/10)
image(theta, prec, t(post), col = grays, xlab = expression(theta), ylab = expression(widetilde(sigma)^2))
gridsize <- 200
theta <- seq(from = 5, to = 15, length = gridsize)
prec <- seq(from = 0, to = 2, length = gridsize)
postprec <- sapply(prec, function(x) dgamma(x, nun1/2, nun1 * sigman12/2))
post <- matrix(0, gridsize, gridsize)
for (i in 1:gridsize) {
post[, i] <- sapply(prec, function(x) dnorm(theta[i], mun, 1/sqrt(10 * x)))
post[, i] <- post[, i] * postprec
}
grays <- gray((10:0)/10)
image(theta, prec, t(post), col = grays, xlab = expression(theta), ylab = expression(widetilde(sigma)^2))
gridsize <- 200
theta <- seq(from = 5, to = 15, length = gridsize)
prec <- seq(from = 0, to = 0.5, length = gridsize)
postprec <- sapply(prec, function(x) dgamma(x, nun1/2, nun1 * sigman12/2))
post <- matrix(0, gridsize, gridsize)
for (i in 1:gridsize) {
post[, i] <- sapply(prec, function(x) dnorm(theta[i], mun, 1/sqrt(10 * x)))
post[, i] <- post[, i] * postprec
}
grays <- gray((10:0)/10)
image(theta, prec, t(post), col = grays, xlab = expression(theta), ylab = expression(widetilde(sigma)^2))
gridsize <- 200
theta <- seq(from = 5, to = 15, length = gridsize)
prec <- seq(from = 0, to = 0.2, length = gridsize)
postprec <- sapply(prec, function(x) dgamma(x, nun1/2, nun1 * sigman12/2))
post <- matrix(0, gridsize, gridsize)
for (i in 1:gridsize) {
post[, i] <- sapply(prec, function(x) dnorm(theta[i], mun, 1/sqrt(10 * x)))
post[, i] <- post[, i] * postprec
}
grays <- gray((10:0)/10)
image(theta, prec, t(post), col = grays, xlab = expression(theta), ylab = expression(widetilde(sigma)^2))
image(theta, prec, t(post), col = grays, xlab = expression(theta), ylab = expression(widetilde(sigma)^2))
school1data <-c(2.11,9.75,13.88,11.3,8.93,15.66,16.38,4.54,8.86,11.94,12.47,11.11,11.65, 14.53, 9.61, 7.38, 3.34,9.06,
9.45, 5.98,7.44, 8.5, 1.55, 11.45, 9.73)
school2data <-c(0.29, 1.13, 6.52,11.72,6.54,5.63,14.59,11.74,9.12,9.43,
10.64, 12.28,9.5,0.63,15.35,5.31,8.49,3.04,3.77,6.22,2.14,6.58,1.11)
school3data <-c(4.33, 7.77,4.15, 5.64,7.69,5.04,10.01,13.43,13.63,9.9,
5.72,5.16,4.33,12.9,11.27,6.05,0.95,6.02,12.22,12.85)
#prior
mu0 <- 5
sigma02 <- 4
k0 <- 1
nu0 <- 2
# data
n1 <- 25
n2 <- 23
n3 <- 20
bary1 <- mean(school1data)
bary2 <- mean(school2data)
bary3 <- mean(school3data)
s12 <- var(school1data)
s22 <- var(school2data)
s32 <- var(school3data)
#posterior
kn1 <- k0 + n1
nun1 <- nu0 + n1
mun <- ((k0* mu0)+ (n1* bary1))/kn1
sigman12 <- (1/nun1) * (nu0 * sigma02 + (n1 - 1) * s12 + k0 * n1 * (bary1 - mu0)^2/kn)
gridsize <- 200
theta <- seq(from = 5, to = 15, length = gridsize)
prec <- seq(from = 0, to = 0.2, length = gridsize)
postprec <- sapply(prec, function(x) dgamma(x, nun1/2, nun1 * sigman12/2))
post <- matrix(0, gridsize, gridsize)
for (i in 1:gridsize) {
post[, i] <- sapply(prec, function(x) dnorm(theta[i], mun, 1/sqrt(10 * x)))
post[, i] <- post[, i] * postprec
}
grays <- gray((10:0)/10)
image(theta, prec, t(post), col = grays, xlab = expression(theta), ylab = expression(widetilde(sigma)^2))
image(theta, prec, t(post), col = grays, xlab = expression(theta), ylab = expression(widetilde(sigma)^2))
n1 <- 25
n2 <- 23
n3 <- 20
bary1 <- mean(school1data)
bary2 <- mean(school2data)
bary3 <- mean(school3data)
s12 <- var(school1data)
s22 <- var(school2data)
s32 <- var(school3data)
kn1 <- k0 + n1
nun1 <- nu0 + n1
mun <- ((k0* mu0)+ (n1* bary1))/kn1
sigman12 <- (1/nun1) * (nu0 * sigma02 + (n1 - 1) * s12 + k0 * n1 * (bary1 - mu0)^2/kn)
sigman12 <- (1/nun1) * (nu0 * sigma02 + (n1 - 1) * s12 + k0 * n1 * (bary1 - mu0)^2/kn1)
gridsize <- 200
theta <- seq(from = 5, to = 15, length = gridsize)
prec <- seq(from = 0, to = 0.2, length = gridsize)
postprec <- sapply(prec, function(x) dgamma(x, nun1/2, nun1 * sigman12/2))
post <- matrix(0, gridsize, gridsize)
for (i in 1:gridsize) {
post[, i] <- sapply(prec, function(x) dnorm(theta[i], mun, 1/sqrt(10 * x)))
post[, i] <- post[, i] * postprec
}
grays <- gray((10:0)/10)
image(theta, prec, t(post), col = grays, xlab = expression(theta), ylab = expression(widetilde(sigma)^2))
sigman12 <- (nu0 * sigma02 + (n1 - 1) * s12 + k0 * n1 * (bary1 - mu0)^2/kn1)
gridsize <- 200
theta <- seq(from = 5, to = 15, length = gridsize)
prec <- seq(from = 0, to = 0.2, length = gridsize)
postprec <- sapply(prec, function(x) dgamma(x, nun1/2, nun1 * sigman12/2))
post <- matrix(0, gridsize, gridsize)
for (i in 1:gridsize) {
post[, i] <- sapply(prec, function(x) dnorm(theta[i], mun, 1/sqrt(10 * x)))
post[, i] <- post[, i] * postprec
}
grays <- gray((10:0)/10)
image(theta, prec, t(post), col = grays, xlab = expression(theta), ylab = expression(widetilde(sigma)^2))
sigman12 <- (1/nun1) * (nu0 * sigma02 + (n1 - 1) * s12 + k0 * n1 * (bary1 - mu0)^2/kn1)
?quantile
interval <-function(x) quantile(x,probs(0.025, 0.975))
#data
school1data <-c(2.11,9.75,13.88,11.3,8.93,15.66,16.38,4.54,8.86,11.94,12.47,11.11,11.65, 14.53, 9.61, 7.38, 3.34,9.06,
9.45, 5.98,7.44, 8.5, 1.55, 11.45, 9.73)
school2data <-c(0.29, 1.13, 6.52,11.72,6.54,5.63,14.59,11.74,9.12,9.43,
10.64, 12.28,9.5,0.63,15.35,5.31,8.49,3.04,3.77,6.22,2.14,6.58,1.11)
school3data <-c(4.33, 7.77,4.15, 5.64,7.69,5.04,10.01,13.43,13.63,9.9,
5.72,5.16,4.33,12.9,11.27,6.05,0.95,6.02,12.22,12.85)
#prior
mu0 <- 5
sigma02 <- 4
k0 <- 1
nu0 <- 2
S <- 10000
normal_conjugate <- function(S = 1000, data, mu_0, k_0, sigma2_0, nu_0) {
n <- length(data)
ybar <- mean(data)
s2 <- var(data)
nu_n <- nu_0 + n
k_n <- k_0 + n
mu_n <- (k_0 * mu_0 + n * ybar)/k_n
sigman2_timesnun <- (nu_0 * sigma2_0 + (n - 1) * s2 + k_0 * n * (ybar - mu_0)^2/k_n)
s2.mc <- 1/rgamma(S, nu_n/2, sigman2_timesnun/2)
theta.mc <- rnorm(S, mu_n, sqrt(s2.mc/k_n))
sample <- cbind(theta.mc, sqrt(s2.mc))
colnames(sample) <- c("mu", "sigma")
return(sample)
}
sample1 <- normal_conjugate(S, school1, mu0, k0, sigma20, nu0)
sample2 <- normal_conjugate(S, school2, mu0, k0, sigma20, nu0)
sample3 <- normal_conjugate(S, school3, mu0, k0, sigma20, nu0)
interval <-function(x) quantile(x,probs(0.025, 0.975))
apply(cbind(sample1, sample2, sample3), 2, interval)
#prior
mu0 <- 5
sigma02 <- 4
k0 <- 1
nu0 <- 2
S <- 10000
normal_conjugate <- function(S = 1000, data, mu_0, k_0, sigma2_0, nu_0) {
n <- length(data)
ybar <- mean(data)
s2 <- var(data)
nu_n <- nu_0 + n
k_n <- k_0 + n
mu_n <- (k_0 * mu_0 + n * ybar)/k_n
sigman2_timesnun <- (nu_0 * sigma2_0 + (n - 1) * s2 + k_0 * n * (ybar - mu_0)^2/k_n)
s2.mc <- 1/rgamma(S, nu_n/2, sigman2_timesnun/2)
theta.mc <- rnorm(S, mu_n, sqrt(s2.mc/k_n))
sample <- cbind(theta.mc, sqrt(s2.mc))
colnames(sample) <- c("mu", "sigma")
return(sample)
}
sample1 <- normal_conjugate(S, school1data, mu0, k0, sigma20, nu0)
sample2 <- normal_conjugate(S, school2data, mu0, k0, sigma20, nu0)
sample3 <- normal_conjugate(S, school3data, mu0, k0, sigma20, nu0)
interval <-function(x) quantile(x,probs(0.025, 0.975))
apply(cbind(sample1, sample2, sample3), 2, interval)
apply(cbind(sample1, sample2, sample3), 2, interval)
sample1 <- normal_conjugate(S, school1data, mu0, k0, sigma20, nu0)
sample2 <- normal_conjugate(S, school2data, mu0, k0, sigma20, nu0)
sample3 <- normal_conjugate(S, school3data, mu0, k0, sigma20, nu0)
sigma20 <- 4
sample1 <- normal_conjugate(S, school1data, mu0, k0, sigma20, nu0)
sample2 <- normal_conjugate(S, school2data, mu0, k0, sigma20, nu0)
sample3 <- normal_conjugate(S, school3data, mu0, k0, sigma20, nu0)
interval <-function(x) quantile(x,probs(0.025, 0.975))
apply(cbind(sample1, sample2, sample3), 2, interval)
interval <-function(x) quantile(x, probs=(0.025, 0.975))
apply(cbind(sample1, sample2, sample3), 2, interval)
interval <-function(x) quantile(x, probs=seq(0.025, 0.975))
apply(cbind(sample1, sample2, sample3), 2, interval)
setwd("~/GitHub/Project-Forecasting-Methods")
data<- read.csv("GlobalTemperatures.csv")
View(data)
is.na(data)
na.omit(data)
data2 <-na.omit(data)
View(data2)
library(tidyverse)
library(fpp3)
view(data2)
data2 %>% mutate(Date = yearmonth(dt))
data2 %>% mutate(Date = yearmonth(dt)) %>% as_tsibble(index=Date)
data2 %>% mutate(Date = yearmonth(dt)) %>% as_tsibble(index=Date) %>% autoplot()
data2 %>% mutate(Date = yearmonth(dt)) %>% as_tsibble(index=Date) %>% autoplot(LandAverageTemperat)
data2 %>% mutate(Date = yearmonth(dt)) %>% as_tsibble(index=Date) %>% autoplot("LandAverageTemperature")
data2 %>% mutate(Date = yearmonth(dt)) %>% as_tsibble(index=Date) %>% autoplot(LandAverageTemperature)
data2 %>% mutate(Date = yearmonth(dt)) %>% as_tsibble(index=Date) %>% select(-dt)
data2 %>% mutate(Date = yearmonth(dt)) %>% as_tsibble(index=Date) %>% select(Date, everything())
data2 %>% mutate(Date = yearmonth(dt)) %>% as_tsibble(index=Date) %>% select(Date, everything()) %>%
select(-dt)
